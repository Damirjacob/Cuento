#Modelo maximizaci√≥n

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import linprog

# Coefficients of the objective function
c = [-5, -6]

# Coefficients of the inequality constraints (left-hand side)
A = [[1, 1], [3, 2], [2, 3]]

# Right-hand side values of the inequality constraints
b = [80, 220, 210]

# Variable bounds
x_bounds = (0, None)
y_bounds = (0, None)

# Solve the linear programming problem
result = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds])

# Print the results
print("Optimal solution:", result.x)
print("Optimal value of the objective function:", -result.fun)

# Generate x and y values for the plot
x_values = np.linspace(0, 100, 100)
y_values = (80 - x_values) / 2  # from the first constraint

# Plot the constraints and solution
plt.plot(x_values, y_values, label="Zmax = 5x + 6y")
plt.plot(x_values, (80 - 1 * x_values) / 1, label="x + y <= 80 Corte")
plt.plot(x_values, (220 - 3 * x_values) / 2, label="3x + 2y <= 220 Armado")
plt.plot(x_values, (210 - 2 * x_values) / 3, label="2x + 3y <= 210 acabado")
plt.xlim((0, 100))
plt.ylim((0, 100))
plt.xlabel("x")
plt.ylabel("y")
plt.fill_between(x_values, 0, y_values, alpha=0.1)
plt.fill_between(x_values, 0, (80 - 1 * x_values) / 1, alpha=0.1)
plt.fill_between(x_values, 0, (220 - 3 * x_values) / 2, alpha=0.1)
plt.fill_between(x_values, 0, (210 - 2 * x_values) / 3, alpha=0.1)
plt.legend()
plt.scatter(result.x[0], result.x[1], color="red", label="Optimal Solution")
plt.legend()
plt.title("Graphical Solution of Linear Programming Problem")
plt.show()